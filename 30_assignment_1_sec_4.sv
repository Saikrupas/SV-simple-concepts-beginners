// Assignment 1: Print the Value of the Stimulus generated by Generator and received by Driver


class transaction;
  randc bit [3:0] a; //input ports only
  randc bit [3:0] b;
  
  function void printdata(string field); //METHOD 2
     $display("%s : a = %d , b = %d", field,a,b);
   endfunction
  
endclass

class generator;
  transaction t;
  mailbox gen2drv;
  event done;
  integer i;
  
  function new(mailbox gen2drv);
    this.gen2drv = gen2drv;
  endfunction
  
  task main();
    for(i=0; i<10; i++) begin //generate 10 transactions 
      t = new();
      t.randomize();
      gen2drv.put(t);
      $display("[GEN] : data sent to driver");
      //$display("[GEN] : value of a = %0d, b = %0d", t.a,t.b);
      t.printdata("[GEN]");
      #1;
    end
    -> done;
  endtask
  
endclass
  

class driver;
  mailbox gen2drv;
  transaction t;
  
  function new(mailbox gen2drv);
    this.gen2drv = gen2drv;
  endfunction
  
  task main();
    forever begin
    t = new();
    gen2drv.get(t);
    $display("[DRV] : received data from generator");
    //$display("[DRV] : value of a = %0d, b = %0d", t.a,t.b);  
      t.printdata("[DRV]");
     #1;
    end
  endtask
endclass

module test();
  transaction t;
  generator gen;
  driver drv;
  mailbox gen2drv;
  
  initial begin 
    t       = new();
    gen2drv = new();
    gen     = new(gen2drv);
    drv     = new(gen2drv);
   
  
  
  fork 
    drv.main();
    gen.main();
  join_any
  
    wait(gen.done.triggered);
  end
  endmodule
